{"/home/travis/build/npmtest/node-npmtest-express-mysql-session/test.js":"/* istanbul instrument in package npmtest_express_mysql_session */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express-mysql-session/lib.npmtest_express_mysql_session.js":"/* istanbul instrument in package npmtest_express_mysql_session */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_express_mysql_session = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_express_mysql_session = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-express-mysql-session/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-express-mysql-session && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_express_mysql_session */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_express_mysql_session\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_express_mysql_session.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_express_mysql_session.rollup.js'] =\n            local.assetsDict['/assets.npmtest_express_mysql_session.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_express_mysql_session.__dirname +\n                    '/lib.npmtest_express_mysql_session.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express-mysql-session/node_modules/express-mysql-session/index.js":"'use strict';\n\nmodule.exports = require('./lib/index.js');\n","/home/travis/build/npmtest/node-npmtest-express-mysql-session/node_modules/express-mysql-session/lib/index.js":"'use strict';\n\nvar mysql = require('mysql');\nvar debug_log = require('debug')('express-mysql-session:log');\nvar debug_error = require('debug')('express-mysql-session:error');\nvar deprecate = require('depd')('express-mysql-session');\nvar util = require('util');\n\nvar defaultOptions = {\n\tcheckExpirationInterval: 900000,// How frequently expired sessions will be cleared; milliseconds.\n\texpiration: 86400000,// The maximum age of a valid session; milliseconds.\n\tcreateDatabaseTable: true,// Whether or not to create the sessions database table, if one does not already exist.\n\tconnectionLimit: 1,// Number of connections when creating a connection pool\n\tcharset: 'utf8mb4_bin',\n\tschema: {\n\t\ttableName: 'sessions',\n\t\tcolumnNames: {\n\t\t\tsession_id: 'session_id',\n\t\t\texpires: 'expires',\n\t\t\tdata: 'data'\n\t\t}\n\t}\n};\n\nmodule.exports = function(session) {\n\n\tvar constructorArgs;\n\n\tif (typeof session.Store === 'undefined') {\n\t\tsession = require('express-session');\n\t\tconstructorArgs = Array.prototype.slice.call(arguments);\n\t}\n\n\tvar Store = session.Store;\n\n\tvar MySQLStore = function(options, connection, cb) {\n\n\t\tdebug_log('Creating session store');\n\n\t\tthis.options = this.clone(options || {});\n\t\tthis.setDefaultOptions();\n\n\t\tif (this.options.debug) {\n\t\t\tdeprecate('The \\'debug\\' option has been removed. This module now uses the debug module to output logs and error messages. Run your app with `DEBUG=express-mysql-session* node your-app.js` to have all logs and errors outputted to the console.');\n\t\t}\n\n\t\tif (typeof connection === 'function') {\n\t\t\tcb = connection;\n\t\t\tconnection = null;\n\t\t}\n\n\t\tthis.connection = connection || mysql.createPool(this.options);\n\n\t\tvar done = function() {\n\n\t\t\tthis.setExpirationInterval();\n\n\t\t\tif (cb) {\n\t\t\t\tcb.apply(undefined, arguments);\n\t\t\t}\n\n\t\t}.bind(this);\n\n\t\tif (!this.options.createDatabaseTable) {\n\t\t\tsetTimeout(done, 0);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.createDatabaseTable(done);\n\t};\n\n\tutil.inherits(MySQLStore, Store);\n\n\tMySQLStore.prototype.setDefaultOptions = function() {\n\n\t\tdebug_log('Setting default options');\n\n\t\tthis.options = this.defaults(this.options, defaultOptions, { recursive: true });\n\t};\n\n\tMySQLStore.prototype.createDatabaseTable = function(cb) {\n\n\t\tdebug_log('Creating sessions database table');\n\n\t\tvar fs = require('fs');\n\n\t\tfs.readFile(__dirname + '/../schema.sql', 'utf-8', function(error, sql) {\n\n\t\t\tif (error) {\n\t\t\t\treturn cb && cb(error);\n\t\t\t}\n\n\t\t\tsql = sql.replace(/`[^`]+`/g, '??');\n\n\t\t\tvar params = [\n\t\t\t\tthis.options.schema.tableName,\n\t\t\t\tthis.options.schema.columnNames.session_id,\n\t\t\t\tthis.options.schema.columnNames.expires,\n\t\t\t\tthis.options.schema.columnNames.data,\n\t\t\t\tthis.options.schema.columnNames.session_id\n\t\t\t];\n\n\t\t\tthis.connection.query(sql, params, function(error) {\n\n\t\t\t\tif (error) {\n\t\t\t\t\tdebug_error('Failed to create sessions database table.');\n\t\t\t\t\tdebug_error(error);\n\t\t\t\t\treturn cb && cb(error);\n\t\t\t\t}\n\n\t\t\t\tcb && cb();\n\t\t\t});\n\n\t\t}.bind(this));\n\t};\n\n\tMySQLStore.prototype.get = function(session_id, cb) {\n\n\t\tdebug_log('Getting session: ' + session_id);\n\n\t\tvar sql = 'SELECT ?? AS data FROM ?? WHERE ?? = ? LIMIT 1';\n\n\t\tvar params = [\n\t\t\tthis.options.schema.columnNames.data,\n\t\t\tthis.options.schema.tableName,\n\t\t\tthis.options.schema.columnNames.session_id,\n\t\t\tsession_id\n\t\t];\n\n\t\tthis.connection.query(sql, params, function(error, rows) {\n\n\t\t\tif (error) {\n\t\t\t\tdebug_error('Failed to get session.');\n\t\t\t\tdebug_error(error);\n\t\t\t\treturn cb(error, null);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tvar session = rows[0] ? JSON.parse(rows[0].data) : null;\n\t\t\t} catch (error) {\n\t\t\t\tdebug_error(error);\n\t\t\t\treturn cb(new Error('Failed to parse data for session: ' + session_id));\n\t\t\t}\n\n\t\t\tcb(null, session);\n\t\t});\n\t};\n\n\tMySQLStore.prototype.set = function(session_id, data, cb) {\n\n\t\tdebug_log('Setting session: ' + session_id);\n\n\t\tvar expires;\n\n\t\tif (data.cookie) {\n\t\t\tif (data.cookie.expires) {\n\t\t\t\texpires = data.cookie.expires;\n\t\t\t} else if (data.cookie._expires) {\n\t\t\t\texpires = data.cookie._expires;\n\t\t\t}\n\t\t}\n\n\t\tif (!expires) {\n\t\t\texpires = Date.now() + this.options.expiration;\n\t\t}\n\n\t\tif (!(expires instanceof Date)) {\n\t\t\texpires = new Date(expires);\n\t\t}\n\n\t\t// Use whole seconds here; not milliseconds.\n\t\texpires = Math.round(expires.getTime() / 1000);\n\n\t\tdata = JSON.stringify(data);\n\n\t\tvar sql = 'INSERT INTO ?? (??, ??, ??) VALUES (?, ?, ?) ON DUPLICATE KEY UPDATE ?? = VALUES(??), ?? = VALUES(??)';\n\n\t\tvar params = [\n\t\t\tthis.options.schema.tableName,\n\t\t\tthis.options.schema.columnNames.session_id,\n\t\t\tthis.options.schema.columnNames.expires,\n\t\t\tthis.options.schema.columnNames.data,\n\t\t\tsession_id,\n\t\t\texpires,\n\t\t\tdata,\n\t\t\tthis.options.schema.columnNames.expires,\n\t\t\tthis.options.schema.columnNames.expires,\n\t\t\tthis.options.schema.columnNames.data,\n\t\t\tthis.options.schema.columnNames.data\n\t\t];\n\n\t\tthis.connection.query(sql, params, function(error) {\n\n\t\t\tif (error) {\n\t\t\t\tdebug_error('Failed to insert session data.');\n\t\t\t\tdebug_error(error);\n\t\t\t\treturn cb && cb(error);\n\t\t\t}\n\n\t\t\tcb && cb();\n\t\t});\n\t};\n\n\tMySQLStore.prototype.touch = function(session_id, data, cb) {\n\n\t\tdebug_log('Touching session: ' + session_id);\n\n\t\tvar expires;\n\n\t\tif (data.cookie) {\n\t\t\tif (data.cookie.expires) {\n\t\t\t\texpires = data.cookie.expires;\n\t\t\t} else if (data.cookie._expires) {\n\t\t\t\texpires = data.cookie._expires;\n\t\t\t}\n\t\t}\n\n\t\tif (!expires) {\n\t\t\texpires = Date.now() + this.options.expiration;\n\t\t}\n\n\t\tif (!(expires instanceof Date)) {\n\t\t\texpires = new Date(expires);\n\t\t}\n\n\t\t// Use whole seconds here; not milliseconds.\n\t\texpires = Math.round(expires.getTime() / 1000);\n\n\t\tvar sql = 'UPDATE ?? SET ?? = ? WHERE ?? = ?';\n\n\t\tvar params = [\n\t\t\tthis.options.schema.tableName,\n\t\t\tthis.options.schema.columnNames.expires,\n\t\t\texpires,\n\t\t\tthis.options.schema.columnNames.session_id,\n\t\t\tsession_id\n\t\t];\n\n\t\tthis.connection.query(sql, params, function(error) {\n\n\t\t\tif (error) {\n\t\t\t\tdebug_error('Failed to touch session.');\n\t\t\t\tdebug_error(error);\n\t\t\t\treturn cb && cb(error);\n\t\t\t}\n\n\t\t\treturn cb && cb();\n\t\t});\n\t};\n\n\tMySQLStore.prototype.destroy = function(session_id, cb) {\n\n\t\tdebug_log('Destroying session: ' + session_id);\n\n\t\tvar sql = 'DELETE FROM ?? WHERE ?? = ? LIMIT 1';\n\n\t\tvar params = [\n\t\t\tthis.options.schema.tableName,\n\t\t\tthis.options.schema.columnNames.session_id,\n\t\t\tsession_id\n\t\t];\n\n\t\tthis.connection.query(sql, params, function(error) {\n\n\t\t\tif (error) {\n\t\t\t\tdebug_error('Failed to destroy session.');\n\t\t\t\tdebug_error(error);\n\t\t\t\treturn cb && cb(error);\n\t\t\t}\n\n\t\t\tcb && cb();\n\t\t});\n\t};\n\n\tMySQLStore.prototype.length = function(cb) {\n\n\t\tdebug_log('Getting number of sessions');\n\n\t\tvar sql = 'SELECT COUNT(*) FROM ??';\n\n\t\tvar params = [\n\t\t\tthis.options.schema.tableName\n\t\t];\n\n\t\tthis.connection.query(sql, params, function(error, rows) {\n\n\t\t\tif (error) {\n\t\t\t\tdebug_error('Failed to get number of sessions.');\n\t\t\t\tdebug_error(error);\n\t\t\t\treturn cb && cb(error);\n\t\t\t}\n\n\t\t\tvar count = rows[0] ? rows[0]['COUNT(*)'] : 0;\n\n\t\t\tcb(null, count);\n\t\t});\n\t};\n\n\tMySQLStore.prototype.clear = function(cb) {\n\n\t\tdebug_log('Clearing all sessions');\n\n\t\tvar sql = 'DELETE FROM ??';\n\n\t\tvar params = [\n\t\t\tthis.options.schema.tableName\n\t\t];\n\n\t\tthis.connection.query(sql, params, function(error) {\n\n\t\t\tif (error) {\n\t\t\t\tdebug_error('Failed to clear all sessions.');\n\t\t\t\tdebug_error(error);\n\t\t\t\treturn cb && cb(error);\n\t\t\t}\n\n\t\t\tcb && cb();\n\t\t});\n\t};\n\n\tMySQLStore.prototype.clearExpiredSessions = function(cb) {\n\n\t\tdebug_log('Clearing expired sessions');\n\n\t\tvar sql = 'DELETE FROM ?? WHERE ?? < ?';\n\n\t\tvar params = [\n\t\t\tthis.options.schema.tableName,\n\t\t\tthis.options.schema.columnNames.expires,\n\t\t\tMath.round(Date.now() / 1000)\n\t\t];\n\n\t\tthis.connection.query(sql, params, function(error) {\n\n\t\t\tif (error) {\n\t\t\t\tdebug_error('Failed to clear expired sessions.');\n\t\t\t\tdebug_error(error);\n\t\t\t\treturn cb && cb(error);\n\t\t\t}\n\n\t\t\tcb && cb();\n\t\t});\n\t};\n\n\tMySQLStore.prototype.setExpirationInterval = function(interval) {\n\n\t\tinterval || (interval = this.options.checkExpirationInterval);\n\n\t\tdebug_log('Setting expiration interval: ' + interval + 'ms');\n\n\t\tthis.clearExpirationInterval();\n\t\tthis._expirationInterval = setInterval(this.clearExpiredSessions.bind(this), interval);\n\t};\n\n\tMySQLStore.prototype.clearExpirationInterval = function() {\n\n\t\tdebug_log('Clearing expiration interval');\n\n\t\tclearInterval(this._expirationInterval);\n\t\tthis._expirationInterval = null;\n\t};\n\n\tMySQLStore.prototype.close = function(cb) {\n\n\t\tdebug_log('Closing session store');\n\n\t\tthis.clearExpirationInterval();\n\n\t\tif (this.connection) {\n\t\t\tthis.connection.end(cb);\n\t\t} else {\n\t\t\tcb && cb(null);\n\t\t}\n\t};\n\n\tMySQLStore.prototype.defaults = function(object, defaultValues, options) {\n\n\t\tif (!this.isObject(object)) {\n\t\t\treturn object;\n\t\t}\n\n\t\tobject = this.clone(object);\n\t\tdefaultValues = defaultValues || {};\n\t\toptions = options || {};\n\t\toptions.recursive = options.recursive === true;\n\n\t\tfor (var key in defaultValues) {\n\n\t\t\tif (typeof object[key] === 'undefined') {\n\t\t\t\tobject[key] = defaultValues[key];\n\t\t\t}\n\n\t\t\tif (options.recursive) {\n\t\t\t\tobject[key] = this.defaults(object[key], defaultValues[key], options);\n\t\t\t}\n\t\t}\n\n\t\treturn object;\n\t}\n\n\tMySQLStore.prototype.clone = function(object) {\n\n\t\treturn JSON.parse(JSON.stringify(object));\n\t}\n\n\tMySQLStore.prototype.isObject = function(value) {\n\n\t\tvar type = typeof value;\n\t\treturn type === 'function' || type === 'object' && !!value;\n\t}\n\n\t// For backwards compatibility:\n\tMySQLStore.prototype.closeStore = deprecate.function(\n\t\tMySQLStore.prototype.close,\n\t\t'The closeStore() method has been deprecated. Use close() instead.'\n\t);\n\n\t// For backwards compatibility:\n\tMySQLStore.prototype.sync = deprecate.function(\n\t\tMySQLStore.prototype.createDatabaseTable,\n\t\t'The sync() method has been deprecated. Use createDatabaseTable() instead.'\n\t);\n\n\tif (constructorArgs) {\n\t\t// For backwards compatibility.\n\t\t// Immediately call as a constructor.\n\t\treturn new (MySQLStore.bind.apply(MySQLStore, [undefined/* context */].concat(constructorArgs)))();\n\t}\n\n\treturn MySQLStore;\n};\n","/home/travis/build/npmtest/node-npmtest-express-mysql-session/node_modules/express-mysql-session/.eslintrc.js":"module.exports = {\n\t'extends': 'eslint:recommended',\n\t'rules': {\n\t\t'indent': ['error', 'tab', { 'SwitchCase': 1 }],\n\t\t'no-console': 0,\n\t\t'no-undef': 0,\n\t\t'no-unused-vars': ['error', { 'vars': 'all', 'args': 'none' }]\n\t}\n};","/home/travis/build/npmtest/node-npmtest-express-mysql-session/node_modules/express-mysql-session/grunt/eslint.js":"'use strict';\n\nmodule.exports = {\n\tsrc: [\n\t\t'lib/*.js',\n\t\t'test/**/*.js',\n\t\t'gruntFile.js',\n\t\t'index.js'\n\t],\n\toptions: {\n\t\tconfigFile: '.eslintrc.js'\n\t}\n};\n","/home/travis/build/npmtest/node-npmtest-express-mysql-session/node_modules/express-mysql-session/grunt/mochaTest.js":"'use strict';\n\nmodule.exports = {\n\tunit: {\n\t\toptions: {\n\t\t\treporter: 'spec'\n\t\t},\n\t\tsrc: ['test/unit/**/*.js']\n\t},\n\tintegration: {\n\t\toptions: {\n\t\t\treporter: 'spec'\n\t\t},\n\t\tsrc: ['test/integration/**/*.js']\n\t}\n};\n","/home/travis/build/npmtest/node-npmtest-express-mysql-session/node_modules/express-mysql-session/gruntFile.js":"'use strict';\n\nmodule.exports = function(grunt) {\n\n\trequire('time-grunt')(grunt);\n\trequire('load-grunt-config')(grunt);\n};\n"}